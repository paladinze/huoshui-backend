type AggregateCourse {
  count: Int!
}

type AggregateDept {
  count: Int!
}

type AggregateFeedback {
  count: Int!
}

type AggregatePosition {
  count: Int!
}

type AggregateProf {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Course {
  id: ID!
  name: String!
  likedCount: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  dept: Dept
  prof: Prof
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String!
  likedCount: Int
  dept: DeptCreateOneWithoutCoursesInput
  prof: ProfCreateOneWithoutCoursesInput
  likedBy: UserCreateManyWithoutLikedCoursesInput
  reviews: ReviewCreateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseCreateManyWithoutDeptInput {
  create: [CourseCreateWithoutDeptInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutLikedByInput {
  create: [CourseCreateWithoutLikedByInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutProfInput {
  create: [CourseCreateWithoutProfInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutReviewsInput {
  create: CourseCreateWithoutReviewsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutDeptInput {
  id: ID
  name: String!
  likedCount: Int
  prof: ProfCreateOneWithoutCoursesInput
  likedBy: UserCreateManyWithoutLikedCoursesInput
  reviews: ReviewCreateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseCreateWithoutLikedByInput {
  id: ID
  name: String!
  likedCount: Int
  dept: DeptCreateOneWithoutCoursesInput
  prof: ProfCreateOneWithoutCoursesInput
  reviews: ReviewCreateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseCreateWithoutProfInput {
  id: ID
  name: String!
  likedCount: Int
  dept: DeptCreateOneWithoutCoursesInput
  likedBy: UserCreateManyWithoutLikedCoursesInput
  reviews: ReviewCreateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseCreateWithoutReviewsInput {
  id: ID
  name: String!
  likedCount: Int
  dept: DeptCreateOneWithoutCoursesInput
  prof: ProfCreateOneWithoutCoursesInput
  likedBy: UserCreateManyWithoutLikedCoursesInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  likedCount_ASC
  likedCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  professional_ASC
  professional_DESC
  expressive_ASC
  expressive_DESC
  kind_ASC
  kind_DESC
  scoreOverall_ASC
  scoreOverall_DESC
  scoreHot_ASC
  scoreHot_DESC
  scoreRepute_ASC
  scoreRepute_DESC
  scoreBirdy_ASC
  scoreBirdy_DESC
  scoreAttend_ASC
  scoreAttend_DESC
  scoreExam_ASC
  scoreExam_DESC
  scoreHomework_ASC
  scoreHomework_DESC
  meanHomework_ASC
  meanHomework_DESC
  meanAttend_ASC
  meanAttend_DESC
  meanBirdy_ASC
  meanBirdy_DESC
  meanExam_ASC
  meanExam_DESC
  countReview_ASC
  countReview_DESC
  countGoodReview_ASC
  countGoodReview_DESC
  countAverageReview_ASC
  countAverageReview_DESC
  countBadReview_ASC
  countBadReview_DESC
  countHomework_ASC
  countHomework_DESC
  countAttend_ASC
  countAttend_DESC
  countBirdy_ASC
  countBirdy_DESC
  countExam_ASC
  countExam_DESC
  countExamDetails_ASC
  countExamDetails_DESC
  countExamPrepYes_ASC
  countExamPrepYes_DESC
  countExamPrepNo_ASC
  countExamPrepNo_DESC
  countExamOpenbookYes_ASC
  countExamOpenbookYes_DESC
  countExamOpenbookNo_ASC
  countExamOpenbookNo_DESC
  countExamOldquestionYes_ASC
  countExamOldquestionYes_DESC
  countExamOldquestionNo_ASC
  countExamOldquestionNo_DESC
  countExamEasymarkYes_ASC
  countExamEasymarkYes_DESC
  countExamEasymarkNo_ASC
  countExamEasymarkNo_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
  likedCount: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  likedCount: Int
  likedCount_not: Int
  likedCount_in: [Int!]
  likedCount_not_in: [Int!]
  likedCount_lt: Int
  likedCount_lte: Int
  likedCount_gt: Int
  likedCount_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  professional: Float
  professional_not: Float
  professional_in: [Float!]
  professional_not_in: [Float!]
  professional_lt: Float
  professional_lte: Float
  professional_gt: Float
  professional_gte: Float
  expressive: Float
  expressive_not: Float
  expressive_in: [Float!]
  expressive_not_in: [Float!]
  expressive_lt: Float
  expressive_lte: Float
  expressive_gt: Float
  expressive_gte: Float
  kind: Float
  kind_not: Float
  kind_in: [Float!]
  kind_not_in: [Float!]
  kind_lt: Float
  kind_lte: Float
  kind_gt: Float
  kind_gte: Float
  scoreOverall: Float
  scoreOverall_not: Float
  scoreOverall_in: [Float!]
  scoreOverall_not_in: [Float!]
  scoreOverall_lt: Float
  scoreOverall_lte: Float
  scoreOverall_gt: Float
  scoreOverall_gte: Float
  scoreHot: Float
  scoreHot_not: Float
  scoreHot_in: [Float!]
  scoreHot_not_in: [Float!]
  scoreHot_lt: Float
  scoreHot_lte: Float
  scoreHot_gt: Float
  scoreHot_gte: Float
  scoreRepute: Float
  scoreRepute_not: Float
  scoreRepute_in: [Float!]
  scoreRepute_not_in: [Float!]
  scoreRepute_lt: Float
  scoreRepute_lte: Float
  scoreRepute_gt: Float
  scoreRepute_gte: Float
  scoreBirdy: Float
  scoreBirdy_not: Float
  scoreBirdy_in: [Float!]
  scoreBirdy_not_in: [Float!]
  scoreBirdy_lt: Float
  scoreBirdy_lte: Float
  scoreBirdy_gt: Float
  scoreBirdy_gte: Float
  scoreAttend: Float
  scoreAttend_not: Float
  scoreAttend_in: [Float!]
  scoreAttend_not_in: [Float!]
  scoreAttend_lt: Float
  scoreAttend_lte: Float
  scoreAttend_gt: Float
  scoreAttend_gte: Float
  scoreExam: Float
  scoreExam_not: Float
  scoreExam_in: [Float!]
  scoreExam_not_in: [Float!]
  scoreExam_lt: Float
  scoreExam_lte: Float
  scoreExam_gt: Float
  scoreExam_gte: Float
  scoreHomework: Float
  scoreHomework_not: Float
  scoreHomework_in: [Float!]
  scoreHomework_not_in: [Float!]
  scoreHomework_lt: Float
  scoreHomework_lte: Float
  scoreHomework_gt: Float
  scoreHomework_gte: Float
  meanHomework: Float
  meanHomework_not: Float
  meanHomework_in: [Float!]
  meanHomework_not_in: [Float!]
  meanHomework_lt: Float
  meanHomework_lte: Float
  meanHomework_gt: Float
  meanHomework_gte: Float
  meanAttend: Float
  meanAttend_not: Float
  meanAttend_in: [Float!]
  meanAttend_not_in: [Float!]
  meanAttend_lt: Float
  meanAttend_lte: Float
  meanAttend_gt: Float
  meanAttend_gte: Float
  meanBirdy: Float
  meanBirdy_not: Float
  meanBirdy_in: [Float!]
  meanBirdy_not_in: [Float!]
  meanBirdy_lt: Float
  meanBirdy_lte: Float
  meanBirdy_gt: Float
  meanBirdy_gte: Float
  meanExam: Float
  meanExam_not: Float
  meanExam_in: [Float!]
  meanExam_not_in: [Float!]
  meanExam_lt: Float
  meanExam_lte: Float
  meanExam_gt: Float
  meanExam_gte: Float
  countReview: Int
  countReview_not: Int
  countReview_in: [Int!]
  countReview_not_in: [Int!]
  countReview_lt: Int
  countReview_lte: Int
  countReview_gt: Int
  countReview_gte: Int
  countGoodReview: Int
  countGoodReview_not: Int
  countGoodReview_in: [Int!]
  countGoodReview_not_in: [Int!]
  countGoodReview_lt: Int
  countGoodReview_lte: Int
  countGoodReview_gt: Int
  countGoodReview_gte: Int
  countAverageReview: Int
  countAverageReview_not: Int
  countAverageReview_in: [Int!]
  countAverageReview_not_in: [Int!]
  countAverageReview_lt: Int
  countAverageReview_lte: Int
  countAverageReview_gt: Int
  countAverageReview_gte: Int
  countBadReview: Int
  countBadReview_not: Int
  countBadReview_in: [Int!]
  countBadReview_not_in: [Int!]
  countBadReview_lt: Int
  countBadReview_lte: Int
  countBadReview_gt: Int
  countBadReview_gte: Int
  countHomework: Int
  countHomework_not: Int
  countHomework_in: [Int!]
  countHomework_not_in: [Int!]
  countHomework_lt: Int
  countHomework_lte: Int
  countHomework_gt: Int
  countHomework_gte: Int
  countAttend: Int
  countAttend_not: Int
  countAttend_in: [Int!]
  countAttend_not_in: [Int!]
  countAttend_lt: Int
  countAttend_lte: Int
  countAttend_gt: Int
  countAttend_gte: Int
  countBirdy: Int
  countBirdy_not: Int
  countBirdy_in: [Int!]
  countBirdy_not_in: [Int!]
  countBirdy_lt: Int
  countBirdy_lte: Int
  countBirdy_gt: Int
  countBirdy_gte: Int
  countExam: Int
  countExam_not: Int
  countExam_in: [Int!]
  countExam_not_in: [Int!]
  countExam_lt: Int
  countExam_lte: Int
  countExam_gt: Int
  countExam_gte: Int
  countExamDetails: Int
  countExamDetails_not: Int
  countExamDetails_in: [Int!]
  countExamDetails_not_in: [Int!]
  countExamDetails_lt: Int
  countExamDetails_lte: Int
  countExamDetails_gt: Int
  countExamDetails_gte: Int
  countExamPrepYes: Int
  countExamPrepYes_not: Int
  countExamPrepYes_in: [Int!]
  countExamPrepYes_not_in: [Int!]
  countExamPrepYes_lt: Int
  countExamPrepYes_lte: Int
  countExamPrepYes_gt: Int
  countExamPrepYes_gte: Int
  countExamPrepNo: Int
  countExamPrepNo_not: Int
  countExamPrepNo_in: [Int!]
  countExamPrepNo_not_in: [Int!]
  countExamPrepNo_lt: Int
  countExamPrepNo_lte: Int
  countExamPrepNo_gt: Int
  countExamPrepNo_gte: Int
  countExamOpenbookYes: Int
  countExamOpenbookYes_not: Int
  countExamOpenbookYes_in: [Int!]
  countExamOpenbookYes_not_in: [Int!]
  countExamOpenbookYes_lt: Int
  countExamOpenbookYes_lte: Int
  countExamOpenbookYes_gt: Int
  countExamOpenbookYes_gte: Int
  countExamOpenbookNo: Int
  countExamOpenbookNo_not: Int
  countExamOpenbookNo_in: [Int!]
  countExamOpenbookNo_not_in: [Int!]
  countExamOpenbookNo_lt: Int
  countExamOpenbookNo_lte: Int
  countExamOpenbookNo_gt: Int
  countExamOpenbookNo_gte: Int
  countExamOldquestionYes: Int
  countExamOldquestionYes_not: Int
  countExamOldquestionYes_in: [Int!]
  countExamOldquestionYes_not_in: [Int!]
  countExamOldquestionYes_lt: Int
  countExamOldquestionYes_lte: Int
  countExamOldquestionYes_gt: Int
  countExamOldquestionYes_gte: Int
  countExamOldquestionNo: Int
  countExamOldquestionNo_not: Int
  countExamOldquestionNo_in: [Int!]
  countExamOldquestionNo_not_in: [Int!]
  countExamOldquestionNo_lt: Int
  countExamOldquestionNo_lte: Int
  countExamOldquestionNo_gt: Int
  countExamOldquestionNo_gte: Int
  countExamEasymarkYes: Int
  countExamEasymarkYes_not: Int
  countExamEasymarkYes_in: [Int!]
  countExamEasymarkYes_not_in: [Int!]
  countExamEasymarkYes_lt: Int
  countExamEasymarkYes_lte: Int
  countExamEasymarkYes_gt: Int
  countExamEasymarkYes_gte: Int
  countExamEasymarkNo: Int
  countExamEasymarkNo_not: Int
  countExamEasymarkNo_in: [Int!]
  countExamEasymarkNo_not_in: [Int!]
  countExamEasymarkNo_lt: Int
  countExamEasymarkNo_lte: Int
  countExamEasymarkNo_gt: Int
  countExamEasymarkNo_gte: Int
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  name: String
  likedCount: Int
  dept: DeptUpdateOneWithoutCoursesInput
  prof: ProfUpdateOneWithoutCoursesInput
  likedBy: UserUpdateManyWithoutLikedCoursesInput
  reviews: ReviewUpdateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateManyDataInput {
  name: String
  likedCount: Int
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateManyMutationInput {
  name: String
  likedCount: Int
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateManyWithoutDeptInput {
  create: [CourseCreateWithoutDeptInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutDeptInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutDeptInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutLikedByInput {
  create: [CourseCreateWithoutLikedByInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutLikedByInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutLikedByInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutProfInput {
  create: [CourseCreateWithoutProfInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutProfInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutProfInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateOneWithoutReviewsInput {
  create: CourseCreateWithoutReviewsInput
  update: CourseUpdateWithoutReviewsDataInput
  upsert: CourseUpsertWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutDeptDataInput {
  name: String
  likedCount: Int
  prof: ProfUpdateOneWithoutCoursesInput
  likedBy: UserUpdateManyWithoutLikedCoursesInput
  reviews: ReviewUpdateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateWithoutLikedByDataInput {
  name: String
  likedCount: Int
  dept: DeptUpdateOneWithoutCoursesInput
  prof: ProfUpdateOneWithoutCoursesInput
  reviews: ReviewUpdateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateWithoutProfDataInput {
  name: String
  likedCount: Int
  dept: DeptUpdateOneWithoutCoursesInput
  likedBy: UserUpdateManyWithoutLikedCoursesInput
  reviews: ReviewUpdateManyWithoutCourseInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateWithoutReviewsDataInput {
  name: String
  likedCount: Int
  dept: DeptUpdateOneWithoutCoursesInput
  prof: ProfUpdateOneWithoutCoursesInput
  likedBy: UserUpdateManyWithoutLikedCoursesInput
  professional: Float
  expressive: Float
  kind: Float
  scoreOverall: Float
  scoreHot: Float
  scoreRepute: Float
  scoreBirdy: Float
  scoreAttend: Float
  scoreExam: Float
  scoreHomework: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasymarkYes: Int
  countExamEasymarkNo: Int
}

input CourseUpdateWithWhereUniqueWithoutDeptInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutDeptDataInput!
}

input CourseUpdateWithWhereUniqueWithoutLikedByInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutLikedByDataInput!
}

input CourseUpdateWithWhereUniqueWithoutProfInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutProfDataInput!
}

input CourseUpsertWithoutReviewsInput {
  update: CourseUpdateWithoutReviewsDataInput!
  create: CourseCreateWithoutReviewsInput!
}

input CourseUpsertWithWhereUniqueWithoutDeptInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutDeptDataInput!
  create: CourseCreateWithoutDeptInput!
}

input CourseUpsertWithWhereUniqueWithoutLikedByInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutLikedByDataInput!
  create: CourseCreateWithoutLikedByInput!
}

input CourseUpsertWithWhereUniqueWithoutProfInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutProfDataInput!
  create: CourseCreateWithoutProfInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  likedCount: Int
  likedCount_not: Int
  likedCount_in: [Int!]
  likedCount_not_in: [Int!]
  likedCount_lt: Int
  likedCount_lte: Int
  likedCount_gt: Int
  likedCount_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  dept: DeptWhereInput
  prof: ProfWhereInput
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  professional: Float
  professional_not: Float
  professional_in: [Float!]
  professional_not_in: [Float!]
  professional_lt: Float
  professional_lte: Float
  professional_gt: Float
  professional_gte: Float
  expressive: Float
  expressive_not: Float
  expressive_in: [Float!]
  expressive_not_in: [Float!]
  expressive_lt: Float
  expressive_lte: Float
  expressive_gt: Float
  expressive_gte: Float
  kind: Float
  kind_not: Float
  kind_in: [Float!]
  kind_not_in: [Float!]
  kind_lt: Float
  kind_lte: Float
  kind_gt: Float
  kind_gte: Float
  scoreOverall: Float
  scoreOverall_not: Float
  scoreOverall_in: [Float!]
  scoreOverall_not_in: [Float!]
  scoreOverall_lt: Float
  scoreOverall_lte: Float
  scoreOverall_gt: Float
  scoreOverall_gte: Float
  scoreHot: Float
  scoreHot_not: Float
  scoreHot_in: [Float!]
  scoreHot_not_in: [Float!]
  scoreHot_lt: Float
  scoreHot_lte: Float
  scoreHot_gt: Float
  scoreHot_gte: Float
  scoreRepute: Float
  scoreRepute_not: Float
  scoreRepute_in: [Float!]
  scoreRepute_not_in: [Float!]
  scoreRepute_lt: Float
  scoreRepute_lte: Float
  scoreRepute_gt: Float
  scoreRepute_gte: Float
  scoreBirdy: Float
  scoreBirdy_not: Float
  scoreBirdy_in: [Float!]
  scoreBirdy_not_in: [Float!]
  scoreBirdy_lt: Float
  scoreBirdy_lte: Float
  scoreBirdy_gt: Float
  scoreBirdy_gte: Float
  scoreAttend: Float
  scoreAttend_not: Float
  scoreAttend_in: [Float!]
  scoreAttend_not_in: [Float!]
  scoreAttend_lt: Float
  scoreAttend_lte: Float
  scoreAttend_gt: Float
  scoreAttend_gte: Float
  scoreExam: Float
  scoreExam_not: Float
  scoreExam_in: [Float!]
  scoreExam_not_in: [Float!]
  scoreExam_lt: Float
  scoreExam_lte: Float
  scoreExam_gt: Float
  scoreExam_gte: Float
  scoreHomework: Float
  scoreHomework_not: Float
  scoreHomework_in: [Float!]
  scoreHomework_not_in: [Float!]
  scoreHomework_lt: Float
  scoreHomework_lte: Float
  scoreHomework_gt: Float
  scoreHomework_gte: Float
  meanHomework: Float
  meanHomework_not: Float
  meanHomework_in: [Float!]
  meanHomework_not_in: [Float!]
  meanHomework_lt: Float
  meanHomework_lte: Float
  meanHomework_gt: Float
  meanHomework_gte: Float
  meanAttend: Float
  meanAttend_not: Float
  meanAttend_in: [Float!]
  meanAttend_not_in: [Float!]
  meanAttend_lt: Float
  meanAttend_lte: Float
  meanAttend_gt: Float
  meanAttend_gte: Float
  meanBirdy: Float
  meanBirdy_not: Float
  meanBirdy_in: [Float!]
  meanBirdy_not_in: [Float!]
  meanBirdy_lt: Float
  meanBirdy_lte: Float
  meanBirdy_gt: Float
  meanBirdy_gte: Float
  meanExam: Float
  meanExam_not: Float
  meanExam_in: [Float!]
  meanExam_not_in: [Float!]
  meanExam_lt: Float
  meanExam_lte: Float
  meanExam_gt: Float
  meanExam_gte: Float
  countReview: Int
  countReview_not: Int
  countReview_in: [Int!]
  countReview_not_in: [Int!]
  countReview_lt: Int
  countReview_lte: Int
  countReview_gt: Int
  countReview_gte: Int
  countGoodReview: Int
  countGoodReview_not: Int
  countGoodReview_in: [Int!]
  countGoodReview_not_in: [Int!]
  countGoodReview_lt: Int
  countGoodReview_lte: Int
  countGoodReview_gt: Int
  countGoodReview_gte: Int
  countAverageReview: Int
  countAverageReview_not: Int
  countAverageReview_in: [Int!]
  countAverageReview_not_in: [Int!]
  countAverageReview_lt: Int
  countAverageReview_lte: Int
  countAverageReview_gt: Int
  countAverageReview_gte: Int
  countBadReview: Int
  countBadReview_not: Int
  countBadReview_in: [Int!]
  countBadReview_not_in: [Int!]
  countBadReview_lt: Int
  countBadReview_lte: Int
  countBadReview_gt: Int
  countBadReview_gte: Int
  countHomework: Int
  countHomework_not: Int
  countHomework_in: [Int!]
  countHomework_not_in: [Int!]
  countHomework_lt: Int
  countHomework_lte: Int
  countHomework_gt: Int
  countHomework_gte: Int
  countAttend: Int
  countAttend_not: Int
  countAttend_in: [Int!]
  countAttend_not_in: [Int!]
  countAttend_lt: Int
  countAttend_lte: Int
  countAttend_gt: Int
  countAttend_gte: Int
  countBirdy: Int
  countBirdy_not: Int
  countBirdy_in: [Int!]
  countBirdy_not_in: [Int!]
  countBirdy_lt: Int
  countBirdy_lte: Int
  countBirdy_gt: Int
  countBirdy_gte: Int
  countExam: Int
  countExam_not: Int
  countExam_in: [Int!]
  countExam_not_in: [Int!]
  countExam_lt: Int
  countExam_lte: Int
  countExam_gt: Int
  countExam_gte: Int
  countExamDetails: Int
  countExamDetails_not: Int
  countExamDetails_in: [Int!]
  countExamDetails_not_in: [Int!]
  countExamDetails_lt: Int
  countExamDetails_lte: Int
  countExamDetails_gt: Int
  countExamDetails_gte: Int
  countExamPrepYes: Int
  countExamPrepYes_not: Int
  countExamPrepYes_in: [Int!]
  countExamPrepYes_not_in: [Int!]
  countExamPrepYes_lt: Int
  countExamPrepYes_lte: Int
  countExamPrepYes_gt: Int
  countExamPrepYes_gte: Int
  countExamPrepNo: Int
  countExamPrepNo_not: Int
  countExamPrepNo_in: [Int!]
  countExamPrepNo_not_in: [Int!]
  countExamPrepNo_lt: Int
  countExamPrepNo_lte: Int
  countExamPrepNo_gt: Int
  countExamPrepNo_gte: Int
  countExamOpenbookYes: Int
  countExamOpenbookYes_not: Int
  countExamOpenbookYes_in: [Int!]
  countExamOpenbookYes_not_in: [Int!]
  countExamOpenbookYes_lt: Int
  countExamOpenbookYes_lte: Int
  countExamOpenbookYes_gt: Int
  countExamOpenbookYes_gte: Int
  countExamOpenbookNo: Int
  countExamOpenbookNo_not: Int
  countExamOpenbookNo_in: [Int!]
  countExamOpenbookNo_not_in: [Int!]
  countExamOpenbookNo_lt: Int
  countExamOpenbookNo_lte: Int
  countExamOpenbookNo_gt: Int
  countExamOpenbookNo_gte: Int
  countExamOldquestionYes: Int
  countExamOldquestionYes_not: Int
  countExamOldquestionYes_in: [Int!]
  countExamOldquestionYes_not_in: [Int!]
  countExamOldquestionYes_lt: Int
  countExamOldquestionYes_lte: Int
  countExamOldquestionYes_gt: Int
  countExamOldquestionYes_gte: Int
  countExamOldquestionNo: Int
  countExamOldquestionNo_not: Int
  countExamOldquestionNo_in: [Int!]
  countExamOldquestionNo_not_in: [Int!]
  countExamOldquestionNo_lt: Int
  countExamOldquestionNo_lte: Int
  countExamOldquestionNo_gt: Int
  countExamOldquestionNo_gte: Int
  countExamEasymarkYes: Int
  countExamEasymarkYes_not: Int
  countExamEasymarkYes_in: [Int!]
  countExamEasymarkYes_not_in: [Int!]
  countExamEasymarkYes_lt: Int
  countExamEasymarkYes_lte: Int
  countExamEasymarkYes_gt: Int
  countExamEasymarkYes_gte: Int
  countExamEasymarkNo: Int
  countExamEasymarkNo_not: Int
  countExamEasymarkNo_in: [Int!]
  countExamEasymarkNo_not_in: [Int!]
  countExamEasymarkNo_lt: Int
  countExamEasymarkNo_lte: Int
  countExamEasymarkNo_gt: Int
  countExamEasymarkNo_gte: Int
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Dept {
  id: ID!
  shortname: String!
  longname: String!
  icon: String
  updatedAt: DateTime!
  createdAt: DateTime!
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  profs(where: ProfWhereInput, orderBy: ProfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prof!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

type DeptConnection {
  pageInfo: PageInfo!
  edges: [DeptEdge]!
  aggregate: AggregateDept!
}

input DeptCreateInput {
  id: ID
  shortname: String!
  longname: String!
  icon: String
  students: UserCreateManyWithoutDeptInput
  profs: ProfCreateManyWithoutDeptInput
  courses: CourseCreateManyWithoutDeptInput
}

input DeptCreateOneWithoutCoursesInput {
  create: DeptCreateWithoutCoursesInput
  connect: DeptWhereUniqueInput
}

input DeptCreateOneWithoutProfsInput {
  create: DeptCreateWithoutProfsInput
  connect: DeptWhereUniqueInput
}

input DeptCreateOneWithoutStudentsInput {
  create: DeptCreateWithoutStudentsInput
  connect: DeptWhereUniqueInput
}

input DeptCreateWithoutCoursesInput {
  id: ID
  shortname: String!
  longname: String!
  icon: String
  students: UserCreateManyWithoutDeptInput
  profs: ProfCreateManyWithoutDeptInput
}

input DeptCreateWithoutProfsInput {
  id: ID
  shortname: String!
  longname: String!
  icon: String
  students: UserCreateManyWithoutDeptInput
  courses: CourseCreateManyWithoutDeptInput
}

input DeptCreateWithoutStudentsInput {
  id: ID
  shortname: String!
  longname: String!
  icon: String
  profs: ProfCreateManyWithoutDeptInput
  courses: CourseCreateManyWithoutDeptInput
}

type DeptEdge {
  node: Dept!
  cursor: String!
}

enum DeptOrderByInput {
  id_ASC
  id_DESC
  shortname_ASC
  shortname_DESC
  longname_ASC
  longname_DESC
  icon_ASC
  icon_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeptPreviousValues {
  id: ID!
  shortname: String!
  longname: String!
  icon: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type DeptSubscriptionPayload {
  mutation: MutationType!
  node: Dept
  updatedFields: [String!]
  previousValues: DeptPreviousValues
}

input DeptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeptWhereInput
  AND: [DeptSubscriptionWhereInput!]
  OR: [DeptSubscriptionWhereInput!]
  NOT: [DeptSubscriptionWhereInput!]
}

input DeptUpdateInput {
  shortname: String
  longname: String
  icon: String
  students: UserUpdateManyWithoutDeptInput
  profs: ProfUpdateManyWithoutDeptInput
  courses: CourseUpdateManyWithoutDeptInput
}

input DeptUpdateManyMutationInput {
  shortname: String
  longname: String
  icon: String
}

input DeptUpdateOneRequiredWithoutStudentsInput {
  create: DeptCreateWithoutStudentsInput
  update: DeptUpdateWithoutStudentsDataInput
  upsert: DeptUpsertWithoutStudentsInput
  connect: DeptWhereUniqueInput
}

input DeptUpdateOneWithoutCoursesInput {
  create: DeptCreateWithoutCoursesInput
  update: DeptUpdateWithoutCoursesDataInput
  upsert: DeptUpsertWithoutCoursesInput
  delete: Boolean
  disconnect: Boolean
  connect: DeptWhereUniqueInput
}

input DeptUpdateOneWithoutProfsInput {
  create: DeptCreateWithoutProfsInput
  update: DeptUpdateWithoutProfsDataInput
  upsert: DeptUpsertWithoutProfsInput
  delete: Boolean
  disconnect: Boolean
  connect: DeptWhereUniqueInput
}

input DeptUpdateWithoutCoursesDataInput {
  shortname: String
  longname: String
  icon: String
  students: UserUpdateManyWithoutDeptInput
  profs: ProfUpdateManyWithoutDeptInput
}

input DeptUpdateWithoutProfsDataInput {
  shortname: String
  longname: String
  icon: String
  students: UserUpdateManyWithoutDeptInput
  courses: CourseUpdateManyWithoutDeptInput
}

input DeptUpdateWithoutStudentsDataInput {
  shortname: String
  longname: String
  icon: String
  profs: ProfUpdateManyWithoutDeptInput
  courses: CourseUpdateManyWithoutDeptInput
}

input DeptUpsertWithoutCoursesInput {
  update: DeptUpdateWithoutCoursesDataInput!
  create: DeptCreateWithoutCoursesInput!
}

input DeptUpsertWithoutProfsInput {
  update: DeptUpdateWithoutProfsDataInput!
  create: DeptCreateWithoutProfsInput!
}

input DeptUpsertWithoutStudentsInput {
  update: DeptUpdateWithoutStudentsDataInput!
  create: DeptCreateWithoutStudentsInput!
}

input DeptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  shortname: String
  shortname_not: String
  shortname_in: [String!]
  shortname_not_in: [String!]
  shortname_lt: String
  shortname_lte: String
  shortname_gt: String
  shortname_gte: String
  shortname_contains: String
  shortname_not_contains: String
  shortname_starts_with: String
  shortname_not_starts_with: String
  shortname_ends_with: String
  shortname_not_ends_with: String
  longname: String
  longname_not: String
  longname_in: [String!]
  longname_not_in: [String!]
  longname_lt: String
  longname_lte: String
  longname_gt: String
  longname_gte: String
  longname_contains: String
  longname_not_contains: String
  longname_starts_with: String
  longname_not_starts_with: String
  longname_ends_with: String
  longname_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  profs_every: ProfWhereInput
  profs_some: ProfWhereInput
  profs_none: ProfWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  AND: [DeptWhereInput!]
  OR: [DeptWhereInput!]
  NOT: [DeptWhereInput!]
}

input DeptWhereUniqueInput {
  id: ID
  shortname: String
  longname: String
}

type Feedback {
  id: ID!
  name: String
  contact: String
  content: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedbackConnection {
  pageInfo: PageInfo!
  edges: [FeedbackEdge]!
  aggregate: AggregateFeedback!
}

input FeedbackCreateInput {
  id: ID
  name: String
  contact: String
  content: String!
}

type FeedbackEdge {
  node: Feedback!
  cursor: String!
}

enum FeedbackOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  contact_ASC
  contact_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FeedbackPreviousValues {
  id: ID!
  name: String
  contact: String
  content: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FeedbackSubscriptionPayload {
  mutation: MutationType!
  node: Feedback
  updatedFields: [String!]
  previousValues: FeedbackPreviousValues
}

input FeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedbackWhereInput
  AND: [FeedbackSubscriptionWhereInput!]
  OR: [FeedbackSubscriptionWhereInput!]
  NOT: [FeedbackSubscriptionWhereInput!]
}

input FeedbackUpdateInput {
  name: String
  contact: String
  content: String
}

input FeedbackUpdateManyMutationInput {
  name: String
  contact: String
  content: String
}

input FeedbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
}

input FeedbackWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createDept(data: DeptCreateInput!): Dept!
  updateDept(data: DeptUpdateInput!, where: DeptWhereUniqueInput!): Dept
  updateManyDepts(data: DeptUpdateManyMutationInput!, where: DeptWhereInput): BatchPayload!
  upsertDept(where: DeptWhereUniqueInput!, create: DeptCreateInput!, update: DeptUpdateInput!): Dept!
  deleteDept(where: DeptWhereUniqueInput!): Dept
  deleteManyDepts(where: DeptWhereInput): BatchPayload!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  updateFeedback(data: FeedbackUpdateInput!, where: FeedbackWhereUniqueInput!): Feedback
  updateManyFeedbacks(data: FeedbackUpdateManyMutationInput!, where: FeedbackWhereInput): BatchPayload!
  upsertFeedback(where: FeedbackWhereUniqueInput!, create: FeedbackCreateInput!, update: FeedbackUpdateInput!): Feedback!
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteManyFeedbacks(where: FeedbackWhereInput): BatchPayload!
  createPosition(data: PositionCreateInput!): Position!
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateManyPositions(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): BatchPayload!
  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteManyPositions(where: PositionWhereInput): BatchPayload!
  createProf(data: ProfCreateInput!): Prof!
  updateProf(data: ProfUpdateInput!, where: ProfWhereUniqueInput!): Prof
  updateManyProfs(data: ProfUpdateManyMutationInput!, where: ProfWhereInput): BatchPayload!
  upsertProf(where: ProfWhereUniqueInput!, create: ProfCreateInput!, update: ProfUpdateInput!): Prof!
  deleteProf(where: ProfWhereUniqueInput!): Prof
  deleteManyProfs(where: ProfWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Position {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  profs(where: ProfWhereInput, orderBy: ProfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prof!]
}

type PositionConnection {
  pageInfo: PageInfo!
  edges: [PositionEdge]!
  aggregate: AggregatePosition!
}

input PositionCreateInput {
  id: ID
  name: String!
  profs: ProfCreateManyWithoutPositionInput
}

input PositionCreateOneWithoutProfsInput {
  create: PositionCreateWithoutProfsInput
  connect: PositionWhereUniqueInput
}

input PositionCreateWithoutProfsInput {
  id: ID
  name: String!
}

type PositionEdge {
  node: Position!
  cursor: String!
}

enum PositionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PositionPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PositionSubscriptionPayload {
  mutation: MutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

input PositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PositionWhereInput
  AND: [PositionSubscriptionWhereInput!]
  OR: [PositionSubscriptionWhereInput!]
  NOT: [PositionSubscriptionWhereInput!]
}

input PositionUpdateInput {
  name: String
  profs: ProfUpdateManyWithoutPositionInput
}

input PositionUpdateManyMutationInput {
  name: String
}

input PositionUpdateOneWithoutProfsInput {
  create: PositionCreateWithoutProfsInput
  update: PositionUpdateWithoutProfsDataInput
  upsert: PositionUpsertWithoutProfsInput
  delete: Boolean
  disconnect: Boolean
  connect: PositionWhereUniqueInput
}

input PositionUpdateWithoutProfsDataInput {
  name: String
}

input PositionUpsertWithoutProfsInput {
  update: PositionUpdateWithoutProfsDataInput!
  create: PositionCreateWithoutProfsInput!
}

input PositionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  profs_every: ProfWhereInput
  profs_some: ProfWhereInput
  profs_none: ProfWhereInput
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
}

input PositionWhereUniqueInput {
  id: ID
  name: String
}

type Prof {
  id: ID!
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  updatedAt: DateTime!
  createdAt: DateTime!
  dept: Dept
  position: Position
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

type ProfConnection {
  pageInfo: PageInfo!
  edges: [ProfEdge]!
  aggregate: AggregateProf!
}

input ProfCreateInput {
  id: ID
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptCreateOneWithoutProfsInput
  position: PositionCreateOneWithoutProfsInput
  courses: CourseCreateManyWithoutProfInput
  reviews: ReviewCreateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfCreateManyWithoutDeptInput {
  create: [ProfCreateWithoutDeptInput!]
  connect: [ProfWhereUniqueInput!]
}

input ProfCreateManyWithoutPositionInput {
  create: [ProfCreateWithoutPositionInput!]
  connect: [ProfWhereUniqueInput!]
}

input ProfCreateOneWithoutCoursesInput {
  create: ProfCreateWithoutCoursesInput
  connect: ProfWhereUniqueInput
}

input ProfCreateOneWithoutReviewsInput {
  create: ProfCreateWithoutReviewsInput
  connect: ProfWhereUniqueInput
}

input ProfCreateWithoutCoursesInput {
  id: ID
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptCreateOneWithoutProfsInput
  position: PositionCreateOneWithoutProfsInput
  reviews: ReviewCreateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfCreateWithoutDeptInput {
  id: ID
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  position: PositionCreateOneWithoutProfsInput
  courses: CourseCreateManyWithoutProfInput
  reviews: ReviewCreateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfCreateWithoutPositionInput {
  id: ID
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptCreateOneWithoutProfsInput
  courses: CourseCreateManyWithoutProfInput
  reviews: ReviewCreateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfCreateWithoutReviewsInput {
  id: ID
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptCreateOneWithoutProfsInput
  position: PositionCreateOneWithoutProfsInput
  courses: CourseCreateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

type ProfEdge {
  node: Prof!
  cursor: String!
}

enum ProfOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  gender_ASC
  gender_DESC
  birth_ASC
  birth_DESC
  hometown_ASC
  hometown_DESC
  motto_ASC
  motto_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  exp_ASC
  exp_DESC
  group_ASC
  group_DESC
  intro_ASC
  intro_DESC
  education_ASC
  education_DESC
  research_ASC
  research_DESC
  achievement_ASC
  achievement_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  scoreOverall_ASC
  scoreOverall_DESC
  scoreProfessional_ASC
  scoreProfessional_DESC
  scoreExpressive_ASC
  scoreExpressive_DESC
  scoreKind_ASC
  scoreKind_DESC
  meanHomework_ASC
  meanHomework_DESC
  meanAttend_ASC
  meanAttend_DESC
  meanBirdy_ASC
  meanBirdy_DESC
  meanExam_ASC
  meanExam_DESC
  countReview_ASC
  countReview_DESC
  countGoodReview_ASC
  countGoodReview_DESC
  countAverageReview_ASC
  countAverageReview_DESC
  countBadReview_ASC
  countBadReview_DESC
  countHomework_ASC
  countHomework_DESC
  countAttend_ASC
  countAttend_DESC
  countBirdy_ASC
  countBirdy_DESC
  countExam_ASC
  countExam_DESC
  countExamDetails_ASC
  countExamDetails_DESC
  countExamPrepYes_ASC
  countExamPrepYes_DESC
  countExamPrepNo_ASC
  countExamPrepNo_DESC
  countExamOpenbookYes_ASC
  countExamOpenbookYes_DESC
  countExamOpenbookNo_ASC
  countExamOpenbookNo_DESC
  countExamOldquestionYes_ASC
  countExamOldquestionYes_DESC
  countExamOldquestionNo_ASC
  countExamOldquestionNo_DESC
  countExamEasyYes_ASC
  countExamEasyYes_DESC
  countExamEasyNo_ASC
  countExamEasyNo_DESC
}

type ProfPreviousValues {
  id: ID!
  name: String!
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  updatedAt: DateTime!
  createdAt: DateTime!
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  gender: Sex
  gender_not: Sex
  gender_in: [Sex!]
  gender_not_in: [Sex!]
  birth: Int
  birth_not: Int
  birth_in: [Int!]
  birth_not_in: [Int!]
  birth_lt: Int
  birth_lte: Int
  birth_gt: Int
  birth_gte: Int
  hometown: String
  hometown_not: String
  hometown_in: [String!]
  hometown_not_in: [String!]
  hometown_lt: String
  hometown_lte: String
  hometown_gt: String
  hometown_gte: String
  hometown_contains: String
  hometown_not_contains: String
  hometown_starts_with: String
  hometown_not_starts_with: String
  hometown_ends_with: String
  hometown_not_ends_with: String
  motto: String
  motto_not: String
  motto_in: [String!]
  motto_not_in: [String!]
  motto_lt: String
  motto_lte: String
  motto_gt: String
  motto_gte: String
  motto_contains: String
  motto_not_contains: String
  motto_starts_with: String
  motto_not_starts_with: String
  motto_ends_with: String
  motto_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  exp: Int
  exp_not: Int
  exp_in: [Int!]
  exp_not_in: [Int!]
  exp_lt: Int
  exp_lte: Int
  exp_gt: Int
  exp_gte: Int
  group: String
  group_not: String
  group_in: [String!]
  group_not_in: [String!]
  group_lt: String
  group_lte: String
  group_gt: String
  group_gte: String
  group_contains: String
  group_not_contains: String
  group_starts_with: String
  group_not_starts_with: String
  group_ends_with: String
  group_not_ends_with: String
  intro: String
  intro_not: String
  intro_in: [String!]
  intro_not_in: [String!]
  intro_lt: String
  intro_lte: String
  intro_gt: String
  intro_gte: String
  intro_contains: String
  intro_not_contains: String
  intro_starts_with: String
  intro_not_starts_with: String
  intro_ends_with: String
  intro_not_ends_with: String
  education: String
  education_not: String
  education_in: [String!]
  education_not_in: [String!]
  education_lt: String
  education_lte: String
  education_gt: String
  education_gte: String
  education_contains: String
  education_not_contains: String
  education_starts_with: String
  education_not_starts_with: String
  education_ends_with: String
  education_not_ends_with: String
  research: String
  research_not: String
  research_in: [String!]
  research_not_in: [String!]
  research_lt: String
  research_lte: String
  research_gt: String
  research_gte: String
  research_contains: String
  research_not_contains: String
  research_starts_with: String
  research_not_starts_with: String
  research_ends_with: String
  research_not_ends_with: String
  achievement: String
  achievement_not: String
  achievement_in: [String!]
  achievement_not_in: [String!]
  achievement_lt: String
  achievement_lte: String
  achievement_gt: String
  achievement_gte: String
  achievement_contains: String
  achievement_not_contains: String
  achievement_starts_with: String
  achievement_not_starts_with: String
  achievement_ends_with: String
  achievement_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  scoreOverall: Float
  scoreOverall_not: Float
  scoreOverall_in: [Float!]
  scoreOverall_not_in: [Float!]
  scoreOverall_lt: Float
  scoreOverall_lte: Float
  scoreOverall_gt: Float
  scoreOverall_gte: Float
  scoreProfessional: Float
  scoreProfessional_not: Float
  scoreProfessional_in: [Float!]
  scoreProfessional_not_in: [Float!]
  scoreProfessional_lt: Float
  scoreProfessional_lte: Float
  scoreProfessional_gt: Float
  scoreProfessional_gte: Float
  scoreExpressive: Float
  scoreExpressive_not: Float
  scoreExpressive_in: [Float!]
  scoreExpressive_not_in: [Float!]
  scoreExpressive_lt: Float
  scoreExpressive_lte: Float
  scoreExpressive_gt: Float
  scoreExpressive_gte: Float
  scoreKind: Float
  scoreKind_not: Float
  scoreKind_in: [Float!]
  scoreKind_not_in: [Float!]
  scoreKind_lt: Float
  scoreKind_lte: Float
  scoreKind_gt: Float
  scoreKind_gte: Float
  meanHomework: Float
  meanHomework_not: Float
  meanHomework_in: [Float!]
  meanHomework_not_in: [Float!]
  meanHomework_lt: Float
  meanHomework_lte: Float
  meanHomework_gt: Float
  meanHomework_gte: Float
  meanAttend: Float
  meanAttend_not: Float
  meanAttend_in: [Float!]
  meanAttend_not_in: [Float!]
  meanAttend_lt: Float
  meanAttend_lte: Float
  meanAttend_gt: Float
  meanAttend_gte: Float
  meanBirdy: Float
  meanBirdy_not: Float
  meanBirdy_in: [Float!]
  meanBirdy_not_in: [Float!]
  meanBirdy_lt: Float
  meanBirdy_lte: Float
  meanBirdy_gt: Float
  meanBirdy_gte: Float
  meanExam: Float
  meanExam_not: Float
  meanExam_in: [Float!]
  meanExam_not_in: [Float!]
  meanExam_lt: Float
  meanExam_lte: Float
  meanExam_gt: Float
  meanExam_gte: Float
  countReview: Int
  countReview_not: Int
  countReview_in: [Int!]
  countReview_not_in: [Int!]
  countReview_lt: Int
  countReview_lte: Int
  countReview_gt: Int
  countReview_gte: Int
  countGoodReview: Int
  countGoodReview_not: Int
  countGoodReview_in: [Int!]
  countGoodReview_not_in: [Int!]
  countGoodReview_lt: Int
  countGoodReview_lte: Int
  countGoodReview_gt: Int
  countGoodReview_gte: Int
  countAverageReview: Int
  countAverageReview_not: Int
  countAverageReview_in: [Int!]
  countAverageReview_not_in: [Int!]
  countAverageReview_lt: Int
  countAverageReview_lte: Int
  countAverageReview_gt: Int
  countAverageReview_gte: Int
  countBadReview: Int
  countBadReview_not: Int
  countBadReview_in: [Int!]
  countBadReview_not_in: [Int!]
  countBadReview_lt: Int
  countBadReview_lte: Int
  countBadReview_gt: Int
  countBadReview_gte: Int
  countHomework: Int
  countHomework_not: Int
  countHomework_in: [Int!]
  countHomework_not_in: [Int!]
  countHomework_lt: Int
  countHomework_lte: Int
  countHomework_gt: Int
  countHomework_gte: Int
  countAttend: Int
  countAttend_not: Int
  countAttend_in: [Int!]
  countAttend_not_in: [Int!]
  countAttend_lt: Int
  countAttend_lte: Int
  countAttend_gt: Int
  countAttend_gte: Int
  countBirdy: Int
  countBirdy_not: Int
  countBirdy_in: [Int!]
  countBirdy_not_in: [Int!]
  countBirdy_lt: Int
  countBirdy_lte: Int
  countBirdy_gt: Int
  countBirdy_gte: Int
  countExam: Int
  countExam_not: Int
  countExam_in: [Int!]
  countExam_not_in: [Int!]
  countExam_lt: Int
  countExam_lte: Int
  countExam_gt: Int
  countExam_gte: Int
  countExamDetails: Int
  countExamDetails_not: Int
  countExamDetails_in: [Int!]
  countExamDetails_not_in: [Int!]
  countExamDetails_lt: Int
  countExamDetails_lte: Int
  countExamDetails_gt: Int
  countExamDetails_gte: Int
  countExamPrepYes: Int
  countExamPrepYes_not: Int
  countExamPrepYes_in: [Int!]
  countExamPrepYes_not_in: [Int!]
  countExamPrepYes_lt: Int
  countExamPrepYes_lte: Int
  countExamPrepYes_gt: Int
  countExamPrepYes_gte: Int
  countExamPrepNo: Int
  countExamPrepNo_not: Int
  countExamPrepNo_in: [Int!]
  countExamPrepNo_not_in: [Int!]
  countExamPrepNo_lt: Int
  countExamPrepNo_lte: Int
  countExamPrepNo_gt: Int
  countExamPrepNo_gte: Int
  countExamOpenbookYes: Int
  countExamOpenbookYes_not: Int
  countExamOpenbookYes_in: [Int!]
  countExamOpenbookYes_not_in: [Int!]
  countExamOpenbookYes_lt: Int
  countExamOpenbookYes_lte: Int
  countExamOpenbookYes_gt: Int
  countExamOpenbookYes_gte: Int
  countExamOpenbookNo: Int
  countExamOpenbookNo_not: Int
  countExamOpenbookNo_in: [Int!]
  countExamOpenbookNo_not_in: [Int!]
  countExamOpenbookNo_lt: Int
  countExamOpenbookNo_lte: Int
  countExamOpenbookNo_gt: Int
  countExamOpenbookNo_gte: Int
  countExamOldquestionYes: Int
  countExamOldquestionYes_not: Int
  countExamOldquestionYes_in: [Int!]
  countExamOldquestionYes_not_in: [Int!]
  countExamOldquestionYes_lt: Int
  countExamOldquestionYes_lte: Int
  countExamOldquestionYes_gt: Int
  countExamOldquestionYes_gte: Int
  countExamOldquestionNo: Int
  countExamOldquestionNo_not: Int
  countExamOldquestionNo_in: [Int!]
  countExamOldquestionNo_not_in: [Int!]
  countExamOldquestionNo_lt: Int
  countExamOldquestionNo_lte: Int
  countExamOldquestionNo_gt: Int
  countExamOldquestionNo_gte: Int
  countExamEasyYes: Int
  countExamEasyYes_not: Int
  countExamEasyYes_in: [Int!]
  countExamEasyYes_not_in: [Int!]
  countExamEasyYes_lt: Int
  countExamEasyYes_lte: Int
  countExamEasyYes_gt: Int
  countExamEasyYes_gte: Int
  countExamEasyNo: Int
  countExamEasyNo_not: Int
  countExamEasyNo_in: [Int!]
  countExamEasyNo_not_in: [Int!]
  countExamEasyNo_lt: Int
  countExamEasyNo_lte: Int
  countExamEasyNo_gt: Int
  countExamEasyNo_gte: Int
  AND: [ProfScalarWhereInput!]
  OR: [ProfScalarWhereInput!]
  NOT: [ProfScalarWhereInput!]
}

type ProfSubscriptionPayload {
  mutation: MutationType!
  node: Prof
  updatedFields: [String!]
  previousValues: ProfPreviousValues
}

input ProfSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfWhereInput
  AND: [ProfSubscriptionWhereInput!]
  OR: [ProfSubscriptionWhereInput!]
  NOT: [ProfSubscriptionWhereInput!]
}

input ProfUpdateInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptUpdateOneWithoutProfsInput
  position: PositionUpdateOneWithoutProfsInput
  courses: CourseUpdateManyWithoutProfInput
  reviews: ReviewUpdateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateManyDataInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateManyMutationInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateManyWithoutDeptInput {
  create: [ProfCreateWithoutDeptInput!]
  delete: [ProfWhereUniqueInput!]
  connect: [ProfWhereUniqueInput!]
  set: [ProfWhereUniqueInput!]
  disconnect: [ProfWhereUniqueInput!]
  update: [ProfUpdateWithWhereUniqueWithoutDeptInput!]
  upsert: [ProfUpsertWithWhereUniqueWithoutDeptInput!]
  deleteMany: [ProfScalarWhereInput!]
  updateMany: [ProfUpdateManyWithWhereNestedInput!]
}

input ProfUpdateManyWithoutPositionInput {
  create: [ProfCreateWithoutPositionInput!]
  delete: [ProfWhereUniqueInput!]
  connect: [ProfWhereUniqueInput!]
  set: [ProfWhereUniqueInput!]
  disconnect: [ProfWhereUniqueInput!]
  update: [ProfUpdateWithWhereUniqueWithoutPositionInput!]
  upsert: [ProfUpsertWithWhereUniqueWithoutPositionInput!]
  deleteMany: [ProfScalarWhereInput!]
  updateMany: [ProfUpdateManyWithWhereNestedInput!]
}

input ProfUpdateManyWithWhereNestedInput {
  where: ProfScalarWhereInput!
  data: ProfUpdateManyDataInput!
}

input ProfUpdateOneWithoutCoursesInput {
  create: ProfCreateWithoutCoursesInput
  update: ProfUpdateWithoutCoursesDataInput
  upsert: ProfUpsertWithoutCoursesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfWhereUniqueInput
}

input ProfUpdateOneWithoutReviewsInput {
  create: ProfCreateWithoutReviewsInput
  update: ProfUpdateWithoutReviewsDataInput
  upsert: ProfUpsertWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfWhereUniqueInput
}

input ProfUpdateWithoutCoursesDataInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptUpdateOneWithoutProfsInput
  position: PositionUpdateOneWithoutProfsInput
  reviews: ReviewUpdateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateWithoutDeptDataInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  position: PositionUpdateOneWithoutProfsInput
  courses: CourseUpdateManyWithoutProfInput
  reviews: ReviewUpdateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateWithoutPositionDataInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptUpdateOneWithoutProfsInput
  courses: CourseUpdateManyWithoutProfInput
  reviews: ReviewUpdateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateWithoutReviewsDataInput {
  name: String
  code: String
  gender: Sex
  birth: Int
  hometown: String
  motto: String
  email: String
  phone: String
  exp: Int
  group: String
  intro: String
  education: String
  research: String
  achievement: String
  dept: DeptUpdateOneWithoutProfsInput
  position: PositionUpdateOneWithoutProfsInput
  courses: CourseUpdateManyWithoutProfInput
  scoreOverall: Float
  scoreProfessional: Float
  scoreExpressive: Float
  scoreKind: Float
  meanHomework: Float
  meanAttend: Float
  meanBirdy: Float
  meanExam: Float
  countReview: Int
  countGoodReview: Int
  countAverageReview: Int
  countBadReview: Int
  countHomework: Int
  countAttend: Int
  countBirdy: Int
  countExam: Int
  countExamDetails: Int
  countExamPrepYes: Int
  countExamPrepNo: Int
  countExamOpenbookYes: Int
  countExamOpenbookNo: Int
  countExamOldquestionYes: Int
  countExamOldquestionNo: Int
  countExamEasyYes: Int
  countExamEasyNo: Int
}

input ProfUpdateWithWhereUniqueWithoutDeptInput {
  where: ProfWhereUniqueInput!
  data: ProfUpdateWithoutDeptDataInput!
}

input ProfUpdateWithWhereUniqueWithoutPositionInput {
  where: ProfWhereUniqueInput!
  data: ProfUpdateWithoutPositionDataInput!
}

input ProfUpsertWithoutCoursesInput {
  update: ProfUpdateWithoutCoursesDataInput!
  create: ProfCreateWithoutCoursesInput!
}

input ProfUpsertWithoutReviewsInput {
  update: ProfUpdateWithoutReviewsDataInput!
  create: ProfCreateWithoutReviewsInput!
}

input ProfUpsertWithWhereUniqueWithoutDeptInput {
  where: ProfWhereUniqueInput!
  update: ProfUpdateWithoutDeptDataInput!
  create: ProfCreateWithoutDeptInput!
}

input ProfUpsertWithWhereUniqueWithoutPositionInput {
  where: ProfWhereUniqueInput!
  update: ProfUpdateWithoutPositionDataInput!
  create: ProfCreateWithoutPositionInput!
}

input ProfWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  gender: Sex
  gender_not: Sex
  gender_in: [Sex!]
  gender_not_in: [Sex!]
  birth: Int
  birth_not: Int
  birth_in: [Int!]
  birth_not_in: [Int!]
  birth_lt: Int
  birth_lte: Int
  birth_gt: Int
  birth_gte: Int
  hometown: String
  hometown_not: String
  hometown_in: [String!]
  hometown_not_in: [String!]
  hometown_lt: String
  hometown_lte: String
  hometown_gt: String
  hometown_gte: String
  hometown_contains: String
  hometown_not_contains: String
  hometown_starts_with: String
  hometown_not_starts_with: String
  hometown_ends_with: String
  hometown_not_ends_with: String
  motto: String
  motto_not: String
  motto_in: [String!]
  motto_not_in: [String!]
  motto_lt: String
  motto_lte: String
  motto_gt: String
  motto_gte: String
  motto_contains: String
  motto_not_contains: String
  motto_starts_with: String
  motto_not_starts_with: String
  motto_ends_with: String
  motto_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  exp: Int
  exp_not: Int
  exp_in: [Int!]
  exp_not_in: [Int!]
  exp_lt: Int
  exp_lte: Int
  exp_gt: Int
  exp_gte: Int
  group: String
  group_not: String
  group_in: [String!]
  group_not_in: [String!]
  group_lt: String
  group_lte: String
  group_gt: String
  group_gte: String
  group_contains: String
  group_not_contains: String
  group_starts_with: String
  group_not_starts_with: String
  group_ends_with: String
  group_not_ends_with: String
  intro: String
  intro_not: String
  intro_in: [String!]
  intro_not_in: [String!]
  intro_lt: String
  intro_lte: String
  intro_gt: String
  intro_gte: String
  intro_contains: String
  intro_not_contains: String
  intro_starts_with: String
  intro_not_starts_with: String
  intro_ends_with: String
  intro_not_ends_with: String
  education: String
  education_not: String
  education_in: [String!]
  education_not_in: [String!]
  education_lt: String
  education_lte: String
  education_gt: String
  education_gte: String
  education_contains: String
  education_not_contains: String
  education_starts_with: String
  education_not_starts_with: String
  education_ends_with: String
  education_not_ends_with: String
  research: String
  research_not: String
  research_in: [String!]
  research_not_in: [String!]
  research_lt: String
  research_lte: String
  research_gt: String
  research_gte: String
  research_contains: String
  research_not_contains: String
  research_starts_with: String
  research_not_starts_with: String
  research_ends_with: String
  research_not_ends_with: String
  achievement: String
  achievement_not: String
  achievement_in: [String!]
  achievement_not_in: [String!]
  achievement_lt: String
  achievement_lte: String
  achievement_gt: String
  achievement_gte: String
  achievement_contains: String
  achievement_not_contains: String
  achievement_starts_with: String
  achievement_not_starts_with: String
  achievement_ends_with: String
  achievement_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  dept: DeptWhereInput
  position: PositionWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  scoreOverall: Float
  scoreOverall_not: Float
  scoreOverall_in: [Float!]
  scoreOverall_not_in: [Float!]
  scoreOverall_lt: Float
  scoreOverall_lte: Float
  scoreOverall_gt: Float
  scoreOverall_gte: Float
  scoreProfessional: Float
  scoreProfessional_not: Float
  scoreProfessional_in: [Float!]
  scoreProfessional_not_in: [Float!]
  scoreProfessional_lt: Float
  scoreProfessional_lte: Float
  scoreProfessional_gt: Float
  scoreProfessional_gte: Float
  scoreExpressive: Float
  scoreExpressive_not: Float
  scoreExpressive_in: [Float!]
  scoreExpressive_not_in: [Float!]
  scoreExpressive_lt: Float
  scoreExpressive_lte: Float
  scoreExpressive_gt: Float
  scoreExpressive_gte: Float
  scoreKind: Float
  scoreKind_not: Float
  scoreKind_in: [Float!]
  scoreKind_not_in: [Float!]
  scoreKind_lt: Float
  scoreKind_lte: Float
  scoreKind_gt: Float
  scoreKind_gte: Float
  meanHomework: Float
  meanHomework_not: Float
  meanHomework_in: [Float!]
  meanHomework_not_in: [Float!]
  meanHomework_lt: Float
  meanHomework_lte: Float
  meanHomework_gt: Float
  meanHomework_gte: Float
  meanAttend: Float
  meanAttend_not: Float
  meanAttend_in: [Float!]
  meanAttend_not_in: [Float!]
  meanAttend_lt: Float
  meanAttend_lte: Float
  meanAttend_gt: Float
  meanAttend_gte: Float
  meanBirdy: Float
  meanBirdy_not: Float
  meanBirdy_in: [Float!]
  meanBirdy_not_in: [Float!]
  meanBirdy_lt: Float
  meanBirdy_lte: Float
  meanBirdy_gt: Float
  meanBirdy_gte: Float
  meanExam: Float
  meanExam_not: Float
  meanExam_in: [Float!]
  meanExam_not_in: [Float!]
  meanExam_lt: Float
  meanExam_lte: Float
  meanExam_gt: Float
  meanExam_gte: Float
  countReview: Int
  countReview_not: Int
  countReview_in: [Int!]
  countReview_not_in: [Int!]
  countReview_lt: Int
  countReview_lte: Int
  countReview_gt: Int
  countReview_gte: Int
  countGoodReview: Int
  countGoodReview_not: Int
  countGoodReview_in: [Int!]
  countGoodReview_not_in: [Int!]
  countGoodReview_lt: Int
  countGoodReview_lte: Int
  countGoodReview_gt: Int
  countGoodReview_gte: Int
  countAverageReview: Int
  countAverageReview_not: Int
  countAverageReview_in: [Int!]
  countAverageReview_not_in: [Int!]
  countAverageReview_lt: Int
  countAverageReview_lte: Int
  countAverageReview_gt: Int
  countAverageReview_gte: Int
  countBadReview: Int
  countBadReview_not: Int
  countBadReview_in: [Int!]
  countBadReview_not_in: [Int!]
  countBadReview_lt: Int
  countBadReview_lte: Int
  countBadReview_gt: Int
  countBadReview_gte: Int
  countHomework: Int
  countHomework_not: Int
  countHomework_in: [Int!]
  countHomework_not_in: [Int!]
  countHomework_lt: Int
  countHomework_lte: Int
  countHomework_gt: Int
  countHomework_gte: Int
  countAttend: Int
  countAttend_not: Int
  countAttend_in: [Int!]
  countAttend_not_in: [Int!]
  countAttend_lt: Int
  countAttend_lte: Int
  countAttend_gt: Int
  countAttend_gte: Int
  countBirdy: Int
  countBirdy_not: Int
  countBirdy_in: [Int!]
  countBirdy_not_in: [Int!]
  countBirdy_lt: Int
  countBirdy_lte: Int
  countBirdy_gt: Int
  countBirdy_gte: Int
  countExam: Int
  countExam_not: Int
  countExam_in: [Int!]
  countExam_not_in: [Int!]
  countExam_lt: Int
  countExam_lte: Int
  countExam_gt: Int
  countExam_gte: Int
  countExamDetails: Int
  countExamDetails_not: Int
  countExamDetails_in: [Int!]
  countExamDetails_not_in: [Int!]
  countExamDetails_lt: Int
  countExamDetails_lte: Int
  countExamDetails_gt: Int
  countExamDetails_gte: Int
  countExamPrepYes: Int
  countExamPrepYes_not: Int
  countExamPrepYes_in: [Int!]
  countExamPrepYes_not_in: [Int!]
  countExamPrepYes_lt: Int
  countExamPrepYes_lte: Int
  countExamPrepYes_gt: Int
  countExamPrepYes_gte: Int
  countExamPrepNo: Int
  countExamPrepNo_not: Int
  countExamPrepNo_in: [Int!]
  countExamPrepNo_not_in: [Int!]
  countExamPrepNo_lt: Int
  countExamPrepNo_lte: Int
  countExamPrepNo_gt: Int
  countExamPrepNo_gte: Int
  countExamOpenbookYes: Int
  countExamOpenbookYes_not: Int
  countExamOpenbookYes_in: [Int!]
  countExamOpenbookYes_not_in: [Int!]
  countExamOpenbookYes_lt: Int
  countExamOpenbookYes_lte: Int
  countExamOpenbookYes_gt: Int
  countExamOpenbookYes_gte: Int
  countExamOpenbookNo: Int
  countExamOpenbookNo_not: Int
  countExamOpenbookNo_in: [Int!]
  countExamOpenbookNo_not_in: [Int!]
  countExamOpenbookNo_lt: Int
  countExamOpenbookNo_lte: Int
  countExamOpenbookNo_gt: Int
  countExamOpenbookNo_gte: Int
  countExamOldquestionYes: Int
  countExamOldquestionYes_not: Int
  countExamOldquestionYes_in: [Int!]
  countExamOldquestionYes_not_in: [Int!]
  countExamOldquestionYes_lt: Int
  countExamOldquestionYes_lte: Int
  countExamOldquestionYes_gt: Int
  countExamOldquestionYes_gte: Int
  countExamOldquestionNo: Int
  countExamOldquestionNo_not: Int
  countExamOldquestionNo_in: [Int!]
  countExamOldquestionNo_not_in: [Int!]
  countExamOldquestionNo_lt: Int
  countExamOldquestionNo_lte: Int
  countExamOldquestionNo_gt: Int
  countExamOldquestionNo_gte: Int
  countExamEasyYes: Int
  countExamEasyYes_not: Int
  countExamEasyYes_in: [Int!]
  countExamEasyYes_not_in: [Int!]
  countExamEasyYes_lt: Int
  countExamEasyYes_lte: Int
  countExamEasyYes_gt: Int
  countExamEasyYes_gte: Int
  countExamEasyNo: Int
  countExamEasyNo_not: Int
  countExamEasyNo_in: [Int!]
  countExamEasyNo_not_in: [Int!]
  countExamEasyNo_lt: Int
  countExamEasyNo_lte: Int
  countExamEasyNo_gt: Int
  countExamEasyNo_gte: Int
  AND: [ProfWhereInput!]
  OR: [ProfWhereInput!]
  NOT: [ProfWhereInput!]
}

input ProfWhereUniqueInput {
  id: ID
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  dept(where: DeptWhereUniqueInput!): Dept
  depts(where: DeptWhereInput, orderBy: DeptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dept]!
  deptsConnection(where: DeptWhereInput, orderBy: DeptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeptConnection!
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!
  feedbacksConnection(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackConnection!
  position(where: PositionWhereUniqueInput!): Position
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!
  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!
  prof(where: ProfWhereUniqueInput!): Prof
  profs(where: ProfWhereInput, orderBy: ProfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prof]!
  profsConnection(where: ProfWhereInput, orderBy: ProfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  text: String!
  upVote: Int
  downVote: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  author: User
  prof: Prof
  course: Course
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  dislikedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  professional: Int!
  expressive: Int!
  kind: Int!
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  author: UserCreateOneWithoutReviewsInput
  prof: ProfCreateOneWithoutReviewsInput
  course: CourseCreateOneWithoutReviewsInput
  tags: TagCreateManyWithoutReviewsInput
  likedBy: UserCreateManyWithoutLikedReviewsInput
  dislikedBy: UserCreateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewCreateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutCourseInput {
  create: [ReviewCreateWithoutCourseInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutDislikedByInput {
  create: [ReviewCreateWithoutDislikedByInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutLikedByInput {
  create: [ReviewCreateWithoutLikedByInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutProfInput {
  create: [ReviewCreateWithoutProfInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutTagsInput {
  create: [ReviewCreateWithoutTagsInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutAuthorInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  prof: ProfCreateOneWithoutReviewsInput
  course: CourseCreateOneWithoutReviewsInput
  tags: TagCreateManyWithoutReviewsInput
  likedBy: UserCreateManyWithoutLikedReviewsInput
  dislikedBy: UserCreateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewCreateWithoutCourseInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  author: UserCreateOneWithoutReviewsInput
  prof: ProfCreateOneWithoutReviewsInput
  tags: TagCreateManyWithoutReviewsInput
  likedBy: UserCreateManyWithoutLikedReviewsInput
  dislikedBy: UserCreateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewCreateWithoutDislikedByInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  author: UserCreateOneWithoutReviewsInput
  prof: ProfCreateOneWithoutReviewsInput
  course: CourseCreateOneWithoutReviewsInput
  tags: TagCreateManyWithoutReviewsInput
  likedBy: UserCreateManyWithoutLikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewCreateWithoutLikedByInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  author: UserCreateOneWithoutReviewsInput
  prof: ProfCreateOneWithoutReviewsInput
  course: CourseCreateOneWithoutReviewsInput
  tags: TagCreateManyWithoutReviewsInput
  dislikedBy: UserCreateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewCreateWithoutProfInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  author: UserCreateOneWithoutReviewsInput
  course: CourseCreateOneWithoutReviewsInput
  tags: TagCreateManyWithoutReviewsInput
  likedBy: UserCreateManyWithoutLikedReviewsInput
  dislikedBy: UserCreateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewCreateWithoutTagsInput {
  id: ID
  text: String!
  upVote: Int
  downVote: Int
  author: UserCreateOneWithoutReviewsInput
  prof: ProfCreateOneWithoutReviewsInput
  course: CourseCreateOneWithoutReviewsInput
  likedBy: UserCreateManyWithoutLikedReviewsInput
  dislikedBy: UserCreateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  upVote_ASC
  upVote_DESC
  downVote_ASC
  downVote_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  professional_ASC
  professional_DESC
  expressive_ASC
  expressive_DESC
  kind_ASC
  kind_DESC
  rateHomework_ASC
  rateHomework_DESC
  rateAttend_ASC
  rateAttend_DESC
  rateBirdy_ASC
  rateBirdy_DESC
  hasExam_ASC
  hasExam_DESC
  examprep_ASC
  examprep_DESC
  openbook_ASC
  openbook_DESC
  oldquestion_ASC
  oldquestion_DESC
  easymark_ASC
  easymark_DESC
}

type ReviewPreviousValues {
  id: ID!
  text: String!
  upVote: Int
  downVote: Int
  updatedAt: DateTime!
  createdAt: DateTime!
  professional: Int!
  expressive: Int!
  kind: Int!
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  upVote: Int
  upVote_not: Int
  upVote_in: [Int!]
  upVote_not_in: [Int!]
  upVote_lt: Int
  upVote_lte: Int
  upVote_gt: Int
  upVote_gte: Int
  downVote: Int
  downVote_not: Int
  downVote_in: [Int!]
  downVote_not_in: [Int!]
  downVote_lt: Int
  downVote_lte: Int
  downVote_gt: Int
  downVote_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  professional: Int
  professional_not: Int
  professional_in: [Int!]
  professional_not_in: [Int!]
  professional_lt: Int
  professional_lte: Int
  professional_gt: Int
  professional_gte: Int
  expressive: Int
  expressive_not: Int
  expressive_in: [Int!]
  expressive_not_in: [Int!]
  expressive_lt: Int
  expressive_lte: Int
  expressive_gt: Int
  expressive_gte: Int
  kind: Int
  kind_not: Int
  kind_in: [Int!]
  kind_not_in: [Int!]
  kind_lt: Int
  kind_lte: Int
  kind_gt: Int
  kind_gte: Int
  rateHomework: Int
  rateHomework_not: Int
  rateHomework_in: [Int!]
  rateHomework_not_in: [Int!]
  rateHomework_lt: Int
  rateHomework_lte: Int
  rateHomework_gt: Int
  rateHomework_gte: Int
  rateAttend: Int
  rateAttend_not: Int
  rateAttend_in: [Int!]
  rateAttend_not_in: [Int!]
  rateAttend_lt: Int
  rateAttend_lte: Int
  rateAttend_gt: Int
  rateAttend_gte: Int
  rateBirdy: Int
  rateBirdy_not: Int
  rateBirdy_in: [Int!]
  rateBirdy_not_in: [Int!]
  rateBirdy_lt: Int
  rateBirdy_lte: Int
  rateBirdy_gt: Int
  rateBirdy_gte: Int
  hasExam: Boolean
  hasExam_not: Boolean
  examprep: Boolean
  examprep_not: Boolean
  openbook: Boolean
  openbook_not: Boolean
  oldquestion: Boolean
  oldquestion_not: Boolean
  easymark: Boolean
  easymark_not: Boolean
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  text: String
  upVote: Int
  downVote: Int
  author: UserUpdateOneWithoutReviewsInput
  prof: ProfUpdateOneWithoutReviewsInput
  course: CourseUpdateOneWithoutReviewsInput
  tags: TagUpdateManyWithoutReviewsInput
  likedBy: UserUpdateManyWithoutLikedReviewsInput
  dislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateManyDataInput {
  text: String
  upVote: Int
  downVote: Int
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateManyMutationInput {
  text: String
  upVote: Int
  downVote: Int
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutCourseInput {
  create: [ReviewCreateWithoutCourseInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutDislikedByInput {
  create: [ReviewCreateWithoutDislikedByInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutDislikedByInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutDislikedByInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutLikedByInput {
  create: [ReviewCreateWithoutLikedByInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutLikedByInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutLikedByInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutProfInput {
  create: [ReviewCreateWithoutProfInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutProfInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProfInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutTagsInput {
  create: [ReviewCreateWithoutTagsInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  text: String
  upVote: Int
  downVote: Int
  prof: ProfUpdateOneWithoutReviewsInput
  course: CourseUpdateOneWithoutReviewsInput
  tags: TagUpdateManyWithoutReviewsInput
  likedBy: UserUpdateManyWithoutLikedReviewsInput
  dislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateWithoutCourseDataInput {
  text: String
  upVote: Int
  downVote: Int
  author: UserUpdateOneWithoutReviewsInput
  prof: ProfUpdateOneWithoutReviewsInput
  tags: TagUpdateManyWithoutReviewsInput
  likedBy: UserUpdateManyWithoutLikedReviewsInput
  dislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateWithoutDislikedByDataInput {
  text: String
  upVote: Int
  downVote: Int
  author: UserUpdateOneWithoutReviewsInput
  prof: ProfUpdateOneWithoutReviewsInput
  course: CourseUpdateOneWithoutReviewsInput
  tags: TagUpdateManyWithoutReviewsInput
  likedBy: UserUpdateManyWithoutLikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateWithoutLikedByDataInput {
  text: String
  upVote: Int
  downVote: Int
  author: UserUpdateOneWithoutReviewsInput
  prof: ProfUpdateOneWithoutReviewsInput
  course: CourseUpdateOneWithoutReviewsInput
  tags: TagUpdateManyWithoutReviewsInput
  dislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateWithoutProfDataInput {
  text: String
  upVote: Int
  downVote: Int
  author: UserUpdateOneWithoutReviewsInput
  course: CourseUpdateOneWithoutReviewsInput
  tags: TagUpdateManyWithoutReviewsInput
  likedBy: UserUpdateManyWithoutLikedReviewsInput
  dislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateWithoutTagsDataInput {
  text: String
  upVote: Int
  downVote: Int
  author: UserUpdateOneWithoutReviewsInput
  prof: ProfUpdateOneWithoutReviewsInput
  course: CourseUpdateOneWithoutReviewsInput
  likedBy: UserUpdateManyWithoutLikedReviewsInput
  dislikedBy: UserUpdateManyWithoutDislikedReviewsInput
  professional: Int
  expressive: Int
  kind: Int
  rateHomework: Int
  rateAttend: Int
  rateBirdy: Int
  hasExam: Boolean
  examprep: Boolean
  openbook: Boolean
  oldquestion: Boolean
  easymark: Boolean
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutAuthorDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutCourseInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutCourseDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutDislikedByInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutDislikedByDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutLikedByInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutLikedByDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutProfInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutProfDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutTagsInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutTagsDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  create: ReviewCreateWithoutAuthorInput!
}

input ReviewUpsertWithWhereUniqueWithoutCourseInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutCourseDataInput!
  create: ReviewCreateWithoutCourseInput!
}

input ReviewUpsertWithWhereUniqueWithoutDislikedByInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutDislikedByDataInput!
  create: ReviewCreateWithoutDislikedByInput!
}

input ReviewUpsertWithWhereUniqueWithoutLikedByInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutLikedByDataInput!
  create: ReviewCreateWithoutLikedByInput!
}

input ReviewUpsertWithWhereUniqueWithoutProfInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutProfDataInput!
  create: ReviewCreateWithoutProfInput!
}

input ReviewUpsertWithWhereUniqueWithoutTagsInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutTagsDataInput!
  create: ReviewCreateWithoutTagsInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  upVote: Int
  upVote_not: Int
  upVote_in: [Int!]
  upVote_not_in: [Int!]
  upVote_lt: Int
  upVote_lte: Int
  upVote_gt: Int
  upVote_gte: Int
  downVote: Int
  downVote_not: Int
  downVote_in: [Int!]
  downVote_not_in: [Int!]
  downVote_lt: Int
  downVote_lte: Int
  downVote_gt: Int
  downVote_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  author: UserWhereInput
  prof: ProfWhereInput
  course: CourseWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
  dislikedBy_every: UserWhereInput
  dislikedBy_some: UserWhereInput
  dislikedBy_none: UserWhereInput
  professional: Int
  professional_not: Int
  professional_in: [Int!]
  professional_not_in: [Int!]
  professional_lt: Int
  professional_lte: Int
  professional_gt: Int
  professional_gte: Int
  expressive: Int
  expressive_not: Int
  expressive_in: [Int!]
  expressive_not_in: [Int!]
  expressive_lt: Int
  expressive_lte: Int
  expressive_gt: Int
  expressive_gte: Int
  kind: Int
  kind_not: Int
  kind_in: [Int!]
  kind_not_in: [Int!]
  kind_lt: Int
  kind_lte: Int
  kind_gt: Int
  kind_gte: Int
  rateHomework: Int
  rateHomework_not: Int
  rateHomework_in: [Int!]
  rateHomework_not_in: [Int!]
  rateHomework_lt: Int
  rateHomework_lte: Int
  rateHomework_gt: Int
  rateHomework_gte: Int
  rateAttend: Int
  rateAttend_not: Int
  rateAttend_in: [Int!]
  rateAttend_not_in: [Int!]
  rateAttend_lt: Int
  rateAttend_lte: Int
  rateAttend_gt: Int
  rateAttend_gte: Int
  rateBirdy: Int
  rateBirdy_not: Int
  rateBirdy_in: [Int!]
  rateBirdy_not_in: [Int!]
  rateBirdy_lt: Int
  rateBirdy_lte: Int
  rateBirdy_gt: Int
  rateBirdy_gte: Int
  hasExam: Boolean
  hasExam_not: Boolean
  examprep: Boolean
  examprep_not: Boolean
  openbook: Boolean
  openbook_not: Boolean
  oldquestion: Boolean
  oldquestion_not: Boolean
  easymark: Boolean
  easymark_not: Boolean
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

enum Sex {
  MALE
  FEMALE
}

type Subscription {
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  dept(where: DeptSubscriptionWhereInput): DeptSubscriptionPayload
  feedback(where: FeedbackSubscriptionWhereInput): FeedbackSubscriptionPayload
  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload
  prof(where: ProfSubscriptionWhereInput): ProfSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
  isPositive: Boolean!
  category: String
  updatedAt: DateTime!
  createdAt: DateTime!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  isPositive: Boolean!
  category: String
  reviews: ReviewCreateManyWithoutTagsInput
}

input TagCreateManyWithoutReviewsInput {
  create: [TagCreateWithoutReviewsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutReviewsInput {
  id: ID
  name: String!
  isPositive: Boolean!
  category: String
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isPositive_ASC
  isPositive_DESC
  category_ASC
  category_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
  isPositive: Boolean!
  category: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPositive: Boolean
  isPositive_not: Boolean
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  isPositive: Boolean
  category: String
  reviews: ReviewUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
  isPositive: Boolean
  category: String
}

input TagUpdateManyMutationInput {
  name: String
  isPositive: Boolean
  category: String
}

input TagUpdateManyWithoutReviewsInput {
  create: [TagCreateWithoutReviewsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutReviewsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutReviewsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutReviewsDataInput {
  name: String
  isPositive: Boolean
  category: String
}

input TagUpdateWithWhereUniqueWithoutReviewsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutReviewsDataInput!
}

input TagUpsertWithWhereUniqueWithoutReviewsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutReviewsDataInput!
  create: TagCreateWithoutReviewsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPositive: Boolean
  isPositive_not: Boolean
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  dept: Dept!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  likedReviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  dislikedReviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  likedCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  dept: DeptCreateOneWithoutStudentsInput!
  reviews: ReviewCreateManyWithoutAuthorInput
  likedReviews: ReviewCreateManyWithoutLikedByInput
  dislikedReviews: ReviewCreateManyWithoutDislikedByInput
  likedCourses: CourseCreateManyWithoutLikedByInput
}

input UserCreateManyWithoutDeptInput {
  create: [UserCreateWithoutDeptInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDislikedReviewsInput {
  create: [UserCreateWithoutDislikedReviewsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedCoursesInput {
  create: [UserCreateWithoutLikedCoursesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedReviewsInput {
  create: [UserCreateWithoutLikedReviewsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDeptInput {
  id: ID
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  reviews: ReviewCreateManyWithoutAuthorInput
  likedReviews: ReviewCreateManyWithoutLikedByInput
  dislikedReviews: ReviewCreateManyWithoutDislikedByInput
  likedCourses: CourseCreateManyWithoutLikedByInput
}

input UserCreateWithoutDislikedReviewsInput {
  id: ID
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  dept: DeptCreateOneWithoutStudentsInput!
  reviews: ReviewCreateManyWithoutAuthorInput
  likedReviews: ReviewCreateManyWithoutLikedByInput
  likedCourses: CourseCreateManyWithoutLikedByInput
}

input UserCreateWithoutLikedCoursesInput {
  id: ID
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  dept: DeptCreateOneWithoutStudentsInput!
  reviews: ReviewCreateManyWithoutAuthorInput
  likedReviews: ReviewCreateManyWithoutLikedByInput
  dislikedReviews: ReviewCreateManyWithoutDislikedByInput
}

input UserCreateWithoutLikedReviewsInput {
  id: ID
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  dept: DeptCreateOneWithoutStudentsInput!
  reviews: ReviewCreateManyWithoutAuthorInput
  dislikedReviews: ReviewCreateManyWithoutDislikedByInput
  likedCourses: CourseCreateManyWithoutLikedByInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  dept: DeptCreateOneWithoutStudentsInput!
  likedReviews: ReviewCreateManyWithoutLikedByInput
  dislikedReviews: ReviewCreateManyWithoutDislikedByInput
  likedCourses: CourseCreateManyWithoutLikedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  isLcUser_ASC
  isLcUser_DESC
  lcSalt_ASC
  lcSalt_DESC
  password_ASC
  password_DESC
  firstYear_ASC
  firstYear_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  isLcUser: Boolean
  lcSalt: String
  password: String!
  firstYear: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  isLcUser: Boolean
  isLcUser_not: Boolean
  lcSalt: String
  lcSalt_not: String
  lcSalt_in: [String!]
  lcSalt_not_in: [String!]
  lcSalt_lt: String
  lcSalt_lte: String
  lcSalt_gt: String
  lcSalt_gte: String
  lcSalt_contains: String
  lcSalt_not_contains: String
  lcSalt_starts_with: String
  lcSalt_not_starts_with: String
  lcSalt_ends_with: String
  lcSalt_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  firstYear: Int
  firstYear_not: Int
  firstYear_in: [Int!]
  firstYear_not_in: [Int!]
  firstYear_lt: Int
  firstYear_lte: Int
  firstYear_gt: Int
  firstYear_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
  dept: DeptUpdateOneRequiredWithoutStudentsInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  likedReviews: ReviewUpdateManyWithoutLikedByInput
  dislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  likedCourses: CourseUpdateManyWithoutLikedByInput
}

input UserUpdateManyDataInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
}

input UserUpdateManyWithoutDeptInput {
  create: [UserCreateWithoutDeptInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDeptInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDeptInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutDislikedReviewsInput {
  create: [UserCreateWithoutDislikedReviewsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDislikedReviewsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDislikedReviewsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutLikedCoursesInput {
  create: [UserCreateWithoutLikedCoursesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedCoursesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedCoursesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutLikedReviewsInput {
  create: [UserCreateWithoutLikedReviewsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedReviewsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedReviewsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutDeptDataInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
  reviews: ReviewUpdateManyWithoutAuthorInput
  likedReviews: ReviewUpdateManyWithoutLikedByInput
  dislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  likedCourses: CourseUpdateManyWithoutLikedByInput
}

input UserUpdateWithoutDislikedReviewsDataInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
  dept: DeptUpdateOneRequiredWithoutStudentsInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  likedReviews: ReviewUpdateManyWithoutLikedByInput
  likedCourses: CourseUpdateManyWithoutLikedByInput
}

input UserUpdateWithoutLikedCoursesDataInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
  dept: DeptUpdateOneRequiredWithoutStudentsInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  likedReviews: ReviewUpdateManyWithoutLikedByInput
  dislikedReviews: ReviewUpdateManyWithoutDislikedByInput
}

input UserUpdateWithoutLikedReviewsDataInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
  dept: DeptUpdateOneRequiredWithoutStudentsInput
  reviews: ReviewUpdateManyWithoutAuthorInput
  dislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  likedCourses: CourseUpdateManyWithoutLikedByInput
}

input UserUpdateWithoutReviewsDataInput {
  username: String
  email: String
  isLcUser: Boolean
  lcSalt: String
  password: String
  firstYear: Int
  dept: DeptUpdateOneRequiredWithoutStudentsInput
  likedReviews: ReviewUpdateManyWithoutLikedByInput
  dislikedReviews: ReviewUpdateManyWithoutDislikedByInput
  likedCourses: CourseUpdateManyWithoutLikedByInput
}

input UserUpdateWithWhereUniqueWithoutDeptInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDeptDataInput!
}

input UserUpdateWithWhereUniqueWithoutDislikedReviewsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDislikedReviewsDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedCoursesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedCoursesDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedReviewsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedReviewsDataInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithWhereUniqueWithoutDeptInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDeptDataInput!
  create: UserCreateWithoutDeptInput!
}

input UserUpsertWithWhereUniqueWithoutDislikedReviewsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDislikedReviewsDataInput!
  create: UserCreateWithoutDislikedReviewsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedCoursesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedCoursesDataInput!
  create: UserCreateWithoutLikedCoursesInput!
}

input UserUpsertWithWhereUniqueWithoutLikedReviewsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedReviewsDataInput!
  create: UserCreateWithoutLikedReviewsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  isLcUser: Boolean
  isLcUser_not: Boolean
  lcSalt: String
  lcSalt_not: String
  lcSalt_in: [String!]
  lcSalt_not_in: [String!]
  lcSalt_lt: String
  lcSalt_lte: String
  lcSalt_gt: String
  lcSalt_gte: String
  lcSalt_contains: String
  lcSalt_not_contains: String
  lcSalt_starts_with: String
  lcSalt_not_starts_with: String
  lcSalt_ends_with: String
  lcSalt_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  firstYear: Int
  firstYear_not: Int
  firstYear_in: [Int!]
  firstYear_not_in: [Int!]
  firstYear_lt: Int
  firstYear_lte: Int
  firstYear_gt: Int
  firstYear_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  dept: DeptWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  likedReviews_every: ReviewWhereInput
  likedReviews_some: ReviewWhereInput
  likedReviews_none: ReviewWhereInput
  dislikedReviews_every: ReviewWhereInput
  dislikedReviews_some: ReviewWhereInput
  dislikedReviews_none: ReviewWhereInput
  likedCourses_every: CourseWhereInput
  likedCourses_some: CourseWhereInput
  likedCourses_none: CourseWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
